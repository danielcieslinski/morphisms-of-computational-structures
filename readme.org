* Morphisms of Control Constructs

This is a narrative on how control constructs in programming languages display (homo/iso)morphisms. I first came across this as I was exploring features in computer programming languages and I kept finding out that they started exhibited parallels when their theoretical standpoint is examined. Since 1900s there have been emergent fields like universal algebra and category theory that attempt to capture rigorously the parallels between different domains of study. Trying to read through these writings and observing my own work with programming languages helped me see how programming constructs have deep links in the way they make computational structures tractable. This article is an attempt at telling the (hi)story of how these emerged and what nature of morphisms/structure preserving maps they display among each other.

** Constructs under study
These are the constructs that I have observed to display morphisms.

- Continuations
- Lazy Evaluation / Non-strictness
- Actors
- Closures
- Algebraic Effects
- Monads
- Montague Quantification

** Early pointers

Some of these connections where what drew may attention to find that there is morphisms happening across different control constructs.

** Continuations vs. Lazy Evaluation
Chris Okasaki has found the link between Lazy Evaluation / Call by Need and Continuations: https://link.springer.com/article/10.1007/BF01019945

** Closures vs. Actors
Closures â€” Actor isomorphism was demonstrated by Guy Steele/Dan Friedman but was rejected by Hewitt: https://arxiv.org/vc/arxiv/papers/1008/1008.1459v8.pdf

** Montague Quantification vs. Continuations
Natural language exhibiting continuations is described by Barker here: https://www.cs.bham.ac.uk/~hxt/cw04/barker.pdf

** History

Lambda Calculus was invented by Alonzo Church, inspired by Principia Mathematica, which was a logicist undertaking in response to the Hilbert programme to formalize effective calculability. Lambda Calculus became the standard environment to do work on computation in academic circles. This inspired Scott-Strachey-Landin line of investigations to base programming language studies on it. They used it to understand different programming language constructs popular at the time. Landin came up with operational semantics and Scott/Strachey with denotational semantics that modelled programming languages by mapping them to mathematical models.

Using these formalizations, one can start to reason about what different constructs in programming language mean (operation wise / structure preserving mapping wise) and conduct studies on them for discovering their properties and complexity parameters.

Eugenio Moggi brought together monads and control flow constructs in Lambda Calculus: https://www.ics.uci.edu/~jajones/INF102-S18/readings/09_Moggi.pdf
There was a flurry of work in understanding how control flow constructs work post 1960s which is documented in the work of John Reynolds (See Resources section).

Andrzej Filinski and Olivier Danvy worked on unifying control concepts: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.960&rep=rep1&type=pdf

Filinski found out about Symmetric Lambda Calculus during his Ph. D. work: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.43.8729&rep=rep1&type=pdf
This paper detailed about the duality existing between values and continuations.

Expressions can be thought of as producing data and continuations as consuming data: http://www.cs.ox.ac.uk/ralf.hinze/WG2.8/27/slides/kenichi1.pdf

These works leads up to formalizing computational effects in languages like Eff and Koka. A good bibliography of this chain can be found catalogued by Jeremy Yallop (See Resources).

TODO: Find out how the categorical duality between expressions and continuations can be grounded using initial and final algebras and co-algebras.

* Resources

** Posts

*** [[https://jlongster.com/Whats-in-a-Continuation][Whats in a Continuation]]
James Longster

** Talks
*** [[https://www.youtube.com/watch?v=Ssx2_JKpB3U][A Categorical View of Computational Effects]]

** Surveys

*** [[https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/reynolds-discoveries.pdf][Discovery of Continuations]]
John Reynolds

*** [[https://github.com/yallop/effects-bibliography][Effects Bibliography]]
Jeremy Yallop
